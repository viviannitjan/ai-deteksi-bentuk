(defrule MAIN::determine-which-geometric ""
   (not (number-of-vertices ?))
   (not (known ?))
   =>
   (assert (number-of-vertices (ask-question "How many vertices the shape has ?" three four five six))))

(defrule MAIN::type-of-triangles ""
   (number-of-vertices three)
   (not (known ?))
   =>
   (assert (number-of-same-edges (ask-question "How many equal edges the triangle has ?" two three none))))

(defrule MAIN::type-of-isosceles-triangles ""
   (number-of-vertices three)
   (number-of-same-edges two)
   (not (known ?))
   =>
   (assert (angles-type (ask-question "What angle do the triangle has ?" acute obtuse right))))

(defrule MAIN::type-of-arbitrary-triangle ""
   (number-of-vertices three)
   (number-of-same-edges none)
   (not (known ?))
   =>
   (assert (number-acute-angles (ask-question "Number of acute angle(s) in triangle ?" two three))))

(defrule MAIN::acute-arbitrary-triangle ""
   (number-of-vertices three)
   (number-of-same-edges none)
   (number-acute-angles three)
   (not (known ?))
   =>
   (assert (known " Acute Triangle")))

(defrule MAIN::obtuse-or-right-arbitrary-triangle ""
   (number-of-vertices three)
   (number-of-same-edges none)
   (number-acute-angles two)
   (not (known ?))
   =>
   (assert (number-right-angles (ask-question "Number of right angle in triangle ?" one none))))

(defrule MAIN::right-arbitrary-triangle ""
   (number-of-vertices three)
   (number-of-same-edges none)
   (number-acute-angles two)
   (number-right-angles one)
   (not (known ?))
   =>
   (assert (known "Right triangle")))

(defrule MAIN::obtuse-arbitrary-triangle ""
   (number-of-vertices three)
   (number-of-same-edges none)
   (number-acute-angles two)
   (number-right-angles none)
   (not (known ?))
   =>
   (assert (known "Obtuse triangle")))

(defrule MAIN::acute-isosceles-triangles ""
   (number-of-vertices three)
   (number-of-same-edges two)
   (angles-type acute)
   =>
   (assert (known "Isosceles Acute Triangle")))

(defrule MAIN::obtuse-isosceles-triangles ""
   (number-of-vertices three)
   (number-of-same-edges two)
   (angles-type obtuse)
   =>
   (assert (known "Isosceles Obtuse Triangle")))

(defrule MAIN::right-isosceles-triangles ""
   (number-of-vertices three)
   (number-of-same-edges two)
   (angles-type right)
   =>
   (assert (known "Isosceles Right Triangle")))

(defrule MAIN::equilateral-triangle ""
   (number-of-vertices three)
   (number-of-same-edges three)
   (not (known ?))
   =>
   (assert (known "Equilateral triangle")))

(defrule MAIN::type-of-quadrilaterals ""
   (number-of-vertices four)
   (not (known ?))
   =>
   (assert (all-same-edges (yes-or-no-p "Are all the edges has equal length "))))

(defrule MAIN::square-or-rhombus ""
   (number-of-vertices four)
   (all-same-edges yes)
   (not (known ?))
   =>
   (assert (is-the-angles-right (yes-or-no-p "Are all the angles are right angles"))))

(defrule MAIN::square-shape ""
   (number-of-vertices four)
   (all-same-edges yes)
   (is-the-angles-right yes)
   (not (known ?))
   =>
   (assert (known "Square")))

(defrule MAIN::square-or-rectangle ""
   (number-of-vertices four)
   (all-same-edges no)
   (not (known ?))
   =>
   (assert (is-the-angles-right (yes-or-no-p "Are all the angles are right angles"))))

(defrule MAIN::rectangle-shape ""
   (number-of-vertices four)
   (all-same-edges no)
   (is-the-angles-right yes)
   (not (known ?))
   =>
   (assert (known "Rectangle")))

(defrule MAIN::rhombus-shape ""
   (number-of-vertices four)
   (all-same-edges yes)
   (is-the-angles-right no)
   (not (known ?))
   =>
   (assert (known "Rhombus")))

(defrule MAIN::type-of-parallelogram ""
   (number-of-vertices four)
   (all-same-edges no)
   (is-the-angles-right no)
   (not (known ?))
   =>
   (assert (number-of-parallel (ask-question "How many pair of parallel side does the quadrilateral have ? " two none))))

(defrule MAIN::parallelogram-or-kite ""
   (number-of-vertices four)
   (all-same-edges no)
   (is-the-angles-right no)
   (number-of-parallel two)
   (not (known ?))
   =>
   (assert (known "Parallelogram")))

(defrule MAIN::kite-parallelogram ""
   (number-of-vertices four)
   (all-same-edges no)
   (is-the-angles-right no)
   (number-of-parallel none)
   (not (known ?))
   =>
   (assert (consecutive-sides-are-congruent (yes-or-no-p "Do the consecutive sides are congruent"))))

(defrule MAIN::kite-shape ""
   (number-of-vertices four)
   (all-same-edges no)
   (is-the-angles-right no)
   (number-of-parallel none)
   (consecutive-sides-are-congruent yes)
   (not (known ?))
   =>
   (assert (known "Kite")))

(defrule MAIN::quadrilaterals-v2 ""
   (number-of-vertices four)
   (all-same-edges no)
   (is-the-angles-right no)
   (number-of-parallel none)
   (consecutive-sides-are-congruent no)
   (not (known ?))
   =>
   (assert (known "Irregular quadrilateral")))

(defrule MAIN::quadrilaterals ""
   (number-of-vertices four)
   (all-same-edges no)
   (is-the-angles-right no)
   (number-of-parallel yes)
   (not (known ?))
   =>
   (assert (known "Irregular Trapezium")))

(defrule MAIN::type-of-trapezoid ""
   (number-of-vertices four)
   (number-of-parallel one)
   (not (known ?))
   =>
   (assert (is-the-legs-congruent (yes-or-no-p "Does the legs congruent ?"))))

(defrule MAIN::isosceles-trapezoid ""
   (number-of-vertices four)
   (number-of-parallel one)
   (is-the-legs-congruent yes)
   (not (known ?))
   =>
   (assert (known "Isosceles Trapezium")))

(defrule MAIN::left-right-trapezoid ""
   (number-of-vertices four)
   (number-of-parallel one)
   (is-the-legs-congruent no)
   (not (known ?))
   =>
   (assert (right-angle-position (ask-question "Where do the right angle locates ?" right left))))

(defrule MAIN::right-trapezoid ""
   (number-of-vertices four)
   (number-of-parallel one)
   (is-the-legs-congruent no)
   (right-angle-position right)
   (not (known ?))
   =>
   (assert (known "Right Trapezium")))

(defrule MAIN::left-trapezoid ""
   (number-of-vertices four)
   (number-of-parallel one)
   (is-the-legs-congruent no)
   (right-angle-position left)
   (not (known ?))
   =>
   (assert (known "Left Trapezium")))

(defrule MAIN::is-pentagon ""
   (number-of-vertices five)
   (not (known ?))
   =>
   (assert (number-of-same-edges (ask-question "How many equal edges the pentagon has ?" five other))))

(defrule MAIN::regular-pentagon-shape ""
   (number-of-vertices five)
   (number-of-same-edges five)
   (not (known ?))
   =>
   (assert (known "Regular Pentagon")))

(defrule MAIN::irregular-pentagon-shape ""
   (number-of-vertices five)
   (number-of-same-edges other)
   (not (known ?))
   =>
   (assert (known "Irregular Pentagon")))

(defrule MAIN::is-hexagon ""
   (number-of-vertices six)
   (not (known ?))
   =>
   (assert (is-all-angles-same (yes-or-no-p "Do all the angles same?"))))

(defrule MAIN::regular-hexagon-shape ""
   (number-of-vertices six)
   (is-all-angles-same yes)
   (not (known ?))
   =>
   (assert (known "Regular Hexagon")))

(defrule MAIN::irregular-hexagon-shape ""
   (number-of-vertices six)
   (is-all-angles-same no)
   (not (known ?))
   =>
   (assert (known "Irregular Hexagon")))

(defrule MAIN::print-result ""
   (declare (salience 10))
   (known ?item)
   =>
   (printout t "Shape:")
   (printout t crlf crlf)
   (format t " %s%n%n%n" ?item))

